@page "/client-add"
@page "/client-edit/{id:int}"
@inject ILogger<Index> Logger
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@using AccSol.EF.Models
@using AccSol.EF.Services

<PageTitle>@Title Client</PageTitle>

<h1>@Title Client</h1>
<hr />
<EditForm Model="@client" OnValidSubmit="SaveClient">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="Name" class="form-label">Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="client.Name" />
        </div>
        <ValidationMessage For="@(() => client.Name)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>
@code {
    [Parameter]
    public int id { get; set; }
    protected string Title = "Add";
    protected Client client = new();

    [Inject]
    public ICommonService<Client> _service { get; set; }


    protected async Task Get()
    {
        Logger.LogInformation("Get() was called to load Client object data.");

        client = await _service.Get(id);

        StateHasChanged();
    }
    protected async Task Create()
    {
        Logger.LogInformation("Create() was called to load Client object data.");

        client = await _service.Create(client);

        StateHasChanged();
    }

    protected async Task Update()
    {
        Logger.LogInformation("Update() was called to load Client object data.");

        client = await _service.Update(client);

        StateHasChanged();
    }
    protected override async Task OnParametersSetAsync()
    {
        if (id != 0)
        {
            Title = "Edit";
            await Get();
        }
    }
    protected async Task SaveClient()
    {
        if (client.ID != 0)
        {
            await Update();
        }
        else
        {
            await Create();
        }

        Cancel();
    }
    public void Cancel()
    {
        NavigationManager.NavigateTo("/client-master");
    }
}
