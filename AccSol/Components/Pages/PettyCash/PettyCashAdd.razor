@page "/petty-cash-add"
@page "/petty-cash-edit/{id:int}"
@inject ILogger<Index> Logger
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@using AccSol.EF.Models
@using AccSol.EF.Services
@using AccSol.Components
@using AccSol.ViewModels

<PageTitle>@Title Petty Cash</PageTitle>

<h1>@Title Petty Cash</h1>
<hr />
<EditForm Model="@pettyCash" OnValidSubmit="SavePettyCash">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="PCF No" class="form-label">PCFNo</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="pettyCash.PCFNo" />
        </div>
        <ValidationMessage For="@(() => pettyCash.PCFNo)" />
    </div>
    <div class="mb-3">
        <label for="Date" class="form-label">Date</label>
        <div class="col-md-4">
            <InputDate class="form-control" @bind-Value="pettyCash.Date" />
        </div>
        <ValidationMessage For="@(() => pettyCash.Date)" />
    </div>
    <div class="mb-3">
        <label for="Payee" class="form-label">Payee</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="pettyCash.Payee" />
        </div>
        <ValidationMessage For="@(() => pettyCash.Payee)" />
    </div>
    <div class="mb-3">
        <label for="Particulars" class="form-label">Particulars</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="pettyCash.Particulars" />
        </div>
        <ValidationMessage For="@(() => pettyCash.Particulars)" />
    </div>
    <div class="mb-3">
        <label for="ClientId" class="form-label">Client</label>
        <div class="col-md-4">
            <InputSelect class="form-control" @bind-Value="pettyCash.ClientId">
                @foreach (var client in clients)
                {
                    <option value="@client.ID">@client.Name</option>
                }
            </InputSelect>
        </div>
        <ValidationMessage For="@(() => pettyCash.ClientId)" />
    </div>
        <div class="mb-3">
        <label for="ProjectCodeId" class="form-label">Project Code</label>
        <div class="col-md-4">
            <InputSelect class="form-control" @bind-Value="pettyCash.ProjectCodeId">
                @foreach (var projectCode in projectCodes)
                {
                    <option value="@projectCode.ID">@projectCode.Code</option>
                }
            </InputSelect>
        </div>
        <ValidationMessage For="@(() => pettyCash.ProjectCodeId)" />
    </div>
    <div class="mb-3">
        <label for="Amount" class="form-label">Amount</label>
        <div class="col-md-4">
            <InputNumber class="form-control" @bind-Value="pettyCash.Amount" step="0.01" />
        </div>
        <ValidationMessage For="@(() => pettyCash.Amount)" />
    </div>
    <div class="grid" tabindex="-1">
        <QuickGrid ItemsProvider="@itemsProvider" Virtualize="true" @ref="grid">
            <PropertyColumn Property="@(p => p.AccountName)" Sortable="true" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn="true" >
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="nameSearch" @bind:event="oninput" placeholder="Account name..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
        <PropertyColumn Property="@(p => p.Debit)" Sortable="true" Format="9,999,999,999,999,999.99" />
        <PropertyColumn Property="@(p => p.Credit)" Sortable="true" Format="9,999,999,999,999,999.99" />
          
    </QuickGrid>

    </div>
    <div class="my-2">
        <div class="search-box inline-block mr-4 my-1">
            <input type="search" autofocus @bind="nameSearch" @bind:event="oninput" @bind:after="()=>grid?.RefreshDataAsync()" placeholder="Account name..." />
        </div>

        <div class="inline-block my-1">
            Total: <strong>@numResults results found</strong>
        </div>
    </div>
@*     <div class="mb-3">
        <label for="CoaId" class="form-label">Account</label>
        <div class="col-md-4">
            <InputSelect class="form-control" @bind-Value="pettyCash.CoaId">
                @foreach (var coa in coas)
                {
                    <option value="@coa.ID">@coa.AccountName</option>
                }
            </InputSelect>
        </div>
        <ValidationMessage For="@(() => pettyCash.CoaId)" />
    </div>
    <div class="mb-3">
        <label for="Debit" class="form-label">Debit</label>
        <div class="col-md-4">
            <InputNumber class="form-control" @bind-Value="pettyCash.Debit" step="0.01" />
        </div>
        <ValidationMessage For="@(() => pettyCash.Debit)" />
    </div>
    <div class="mb-3">
        <label for="Credit" class="form-label">Credit</label>
        <div class="col-md-4">
            <InputNumber class="form-control" @bind-Value="pettyCash.Credit" step="0.01" />

        </div>
        <ValidationMessage For="@(() => pettyCash.Credit)" />
    </div> *@
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>
@code {
    [Parameter]
    public int id { get; set; }
    protected string Title = "Add";
    protected PettyCash pettyCash = new();
    protected JournalEntryViewModel? journalEntryViewModel;
    protected JournalEntry journalEntry = new();
    protected List<Client> clients = new();
    protected IQueryable<JournalEntry>? journalEntries;
    protected IQueryable<JournalEntryViewModel>? journalEntriesVM;
    protected List<ProjectCode> projectCodes = new();
    protected List<Coa> coas = new();
    QuickGrid<JournalEntryViewModel>? grid;
    GridItemsProvider<JournalEntryViewModel>? itemsProvider;
    int numResults;
    string nameSearch;
    GridSort<JournalEntryViewModel> accountNameSort = GridSort<JournalEntryViewModel>.ByAscending(x => x.AccountName);

    [Inject]
    public ICommonService<PettyCash> _service { get; set; }
    [Inject]
    public ICommonService<Client> _clientService { get; set; }
    [Inject]
    public ICommonService<ProjectCode> _projectCodeService { get; set; }
    [Inject]
    public ICommonService<Coa> _coaService { get; set; }
    [Inject]
    public ICommonService<JournalEntry> _journalEntryService { get; set; }

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    void AddJournal()
    {
        journalEntryViewModel = new JournalEntryViewModel();
        journalEntriesVM?.Append(journalEntryViewModel);
    }

    void SaveJournal()
    {
        journalEntry = null;
    }

    void CancelAdd()
    {
        journalEntry = null;
    }
    protected async Task<string> GetAccountName(int id)
    {
        string accountName = string.Empty;

        await Task.Run(()=>
        {
            accountName = coas?.FirstOrDefault(c => c.ID == id)?.AccountName;

        });

        return accountName;
    }
    protected async Task Get()
    {
        Logger.LogInformation("Get() was called to load PettyCash object data.");
        if (id != 0)
        {
            Title = "Edit";
            pettyCash = await _service.Get(id);
        }

        var clientList = await _clientService.GetAll();
        if (clientList != null)
        {
            clients = clientList.OrderBy(c => c.Name).ToList();

        }

        var projectCodeList = await _projectCodeService.GetAll();
        if (projectCodeList != null)
        {
            projectCodes = projectCodeList.OrderBy(p => p.Code).ToList();
        }

        var coaList = await _coaService.GetAll();
        if (coaList != null)
        {
            coas = coaList.OrderBy(c => c.AccountName).ToList();
        }

        var journalEntryList = await _journalEntryService.GetAll();
        if (journalEntryList != null)
        {
            journalEntries = journalEntryList.OrderBy(c => c.CoaId).AsQueryable();
            journalEntriesVM = (from j in journalEntries
                                select new JournalEntryViewModel()
                                    {
                                        ID = j.ID,
                                        CoaId = j.CoaId,
                                        AccountName = GetAccountName(j.CoaId.GetValueOrDefault()).Result,
                                        Debit = j.Debit,
                                        Credit = j.Credit
                                    }
            );
        }


        if (pettyCash != null)
        {
            pettyCash.ClientId = clients[0].ID;
            pettyCash.ProjectCodeId = projectCodes[0].ID;
            // pettyCash.CoaId = coas[0].ID;
        }

        itemsProvider = async request =>
        {
            var result = await LoadJournalEntriesAsync(request);

            // Separately display the item count
            if (result.TotalItemCount != numResults && !request.CancellationToken.IsCancellationRequested)
            {
                numResults = result.TotalItemCount;
                StateHasChanged();
            }

            return result;
        };

        StateHasChanged();
    }
    private async ValueTask<GridItemsProviderResult<JournalEntryViewModel>> LoadJournalEntriesAsync(GridItemsProviderRequest<JournalEntryViewModel> request)
    {
        await Task.Run(()=>
        {

            if (journalEntries != null)
            {
                journalEntriesVM = (from j in journalEntries
                                    select new JournalEntryViewModel()
                                        {
                                            ID = j.ID,
                                            CoaId = j.CoaId,
                                            AccountName = GetAccountName(j.CoaId.GetValueOrDefault()).Result,
                                            Debit = j.Debit,
                                            Credit = j.Credit
                                        }
            ).Where(j => j.AccountName == nameSearch).AsQueryable().Skip(request.StartIndex).Take(request.Count.GetValueOrDefault());

                numResults = journalEntriesVM.Count();
            }
        });

        GridItemsProviderResult<JournalEntryViewModel> result = new()
            {
                Items = journalEntriesVM?.ToList(),
                TotalItemCount = int.Parse(journalEntriesVM?.Count().ToString())
            };
        return result;
    }
    protected async Task Create()
    {
        Logger.LogInformation("Create() was called to load PettyCash object data.");

        pettyCash = await _service.Create(pettyCash);

        StateHasChanged();
    }

    protected async Task Update()
    {
        Logger.LogInformation("Update() was called to load PettyCash object data.");

        pettyCash = await _service.Update(pettyCash);

        StateHasChanged();
    }
    protected override async Task OnParametersSetAsync()
    {

        await Get();
    }
    
    protected async Task SavePettyCash(EditContext context)
    {
         
        if (pettyCash.ID != 0)
        {
            await Update();
        }
        else
        {
            await Create();
        }

        Cancel();
    }
    public void Cancel()
    {
        NavigationManager.NavigateTo("/petty-cash-entry");
    }
}
