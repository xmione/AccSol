@page "/petty-cash-entry"
@inject ILogger<Index> Logger
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@using AccSol.EF.Models
@using AccSol.EF.Services
@using AccSol.ViewModels

<PageTitle>Petty Cash</PageTitle>

<h1>Petty Cash</h1>
<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="card-header">
                <EditForm Model="@_pettyCashVM" OnValidSubmit="@SavePettyCash" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="d-flex flex-row" style="overflow-x: auto;">
                        <div class="form-group mx-2">
                            <label for="pcfNo" class="form-label">PCFNo</label>
                            <InputText id="pcfNo" class="form-control" @bind-Value="_pettyCashVM.PCFNo" />
                        </div>
                        <div class="form-group mx-2">
                            <label for="date" class="form-label">Date</label>
                            <InputDate id="date" class="form-control" @bind-Value="_pettyCashVM.Date" />
                        </div>
                        <div class="form-group mx-2">
                            <label for="payee" class="form-label">Payee</label>
                            <InputText id="payee" class="form-control" @bind-Value="_pettyCashVM.Payee" />
                        </div>
                        <div class="form-group mx-2">
                            <label for="particulars" class="form-label">Particulars</label>
                            <InputText id="particulars" class="form-control" @bind-Value="_pettyCashVM.Particulars" />
                        </div>
                        <div class="form-group mx-2">
                            <label for="client" class="form-label">Client</label>
                            <InputSelect id="client" class="form-control" @bind-Value="_pettyCashVM.ClientId">
                                @foreach (var client in _clients)
                                {
                                    <option value="@client.ID">@client.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="form-group mx-2">
                            <label for="projectCode" class="form-label" style="white-space: nowrap;">Project Code</label>
                            <InputSelect id="projectCode" class="form-control" @bind-Value="_pettyCashVM.ProjectCodeId">
                                @foreach (var projectCode in _projectCodes)
                                {
                                    <option value="@projectCode.ID">@projectCode.Code</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="form-group mx-2">
                            <label for="amount" class="form-label">Amount</label>
                            <InputNumber id="amount" class="form-control" @bind-Value="_pettyCashVM.Amount" step="0.01" />
                        </div>
                        <div class="form-group mx-2 d-flex justify-content-between">
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </div>
                    <InputText type="hidden" @bind-Value="_pettyCashVM.ClientName" />
                    <InputText type="hidden" @bind-Value="_pettyCashVM.ProjectName" />
                </EditForm>
            </div>
            <div class="card-body">
                <div class="page-size-chooser">
                    Items per page:
                    <select id="itemsPerPage" @bind="@_pagination.ItemsPerPage">
                        <option>5</option>
                        <option>10</option>
                        <option>20</option>
                        <option>50</option>
                    </select>
                </div>
                
                <div class="grid" tabindex="-1">
                    <QuickGrid ItemsProvider="@_itemsProvider" Virtualize="true" @ref="_grid">
                        <PropertyColumn Property="@(p => p.PCFNo)" Sortable="true" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @bind="_pcfNoSearch" @bind:event="oninput" placeholder="PCF No..." />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>
                        <PropertyColumn Property="@(p => p.Date)" Sortable="true" Format="MM/dd/yyy" />
                        <PropertyColumn Property="@(p => p.Payee)" Sortable="true" />
                        <PropertyColumn Property="@(p => p.Particulars)" Sortable="true" />
                        <PropertyColumn Property="@(p => p.ClientName)" Sortable="true" />
                        <PropertyColumn Property="@(p => p.ProjectName)" Sortable="true" />
                        <PropertyColumn Property="@(p => p.Amount)" Sortable="true" Format="N2" />
                        <TemplateColumn Title="Action">
                            <button @onclck="@(()=>Edit(context))" class="btn btn-info">Edit</button>
                            <button @onclck="@(()=>Delete(context))" class="btn btn-danger">Delete</button>
                        </TemplateColumn>
                    </QuickGrid>

                </div>
                <Paginator State="@_pagination" />
                <div class="my-2">
                    <div class="search-box inline-block mr-4 my-1">
                        <input id="search" type="search" autofocus @bind="_pcfNoSearch" @bind:event="oninput" @bind:after="()=>_grid?.RefreshDataAsync()" placeholder="PCF No..." />
                    </div>

                    <div class="inline-block my-1">
                        Total: <strong>@_numResults results found</strong>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private PettyCash _pettyCash = new();
    private List<PettyCash>? _pettyCashList = new();
    private PettyCashVM _pettyCashVM = new();
    private List<PettyCashVM> _pettyCashVMList = new();
    private List<Client> _clients = new();
    private List<ProjectCode> _projectCodes = new();
    private List<Coa> _coas = new();
    private IQueryable<PettyCash>? _pettyCashQList;
    private IQueryable<PettyCashVM>? _pettyCashVMQList;
    private string? _clientName = null;
    private string? _projectName = null;
    private string? _accountName = null;

    private QuickGrid<PettyCashVM>? _grid;
    private GridItemsProvider<PettyCashVM>? _itemsProvider;
    private int _numResults;
    private string _pcfNoSearch;
    private GridSort<PettyCashVM> pcfNoSort = GridSort<PettyCashVM>.ByAscending(x => x.PCFNo);
    private PaginationState _pagination = new PaginationState { ItemsPerPage = 10 };

    [Inject]
    public ICommonService<PettyCash> _service { get; set; }
    [Inject]
    public ICommonService<Client> _clientService { get; set; }
    [Inject]
    public ICommonService<ProjectCode> _projectCodeService { get; set; }
    [Inject]
    public ICommonService<Coa> _coaService { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await GetInitialDataAsync();
        GetItemsProvider();
    }

    private async Task GetInitialDataAsync()
    {
        Logger.LogInformation("Get() was called to load PettyCash data.");

        await LoadClientsAsync();
        await LoadProjectCodesAsync();
        await LoadClientsAndProjectNamesAsync();
        // for the QuickGrid
        await LoadPettyCashListAsync();
    }

    private async Task LoadClientsAsync()
    {
        var clientList = await _clientService.GetAll();
        _clients = clientList?.OrderBy(c => c.Name).ToList() ?? new List<Client>();
    }

    private async Task LoadProjectCodesAsync()
    {
        var projectCodeList = await _projectCodeService.GetAll();
        _projectCodes = projectCodeList?.OrderBy(p => p.Code).ToList() ?? new List<ProjectCode>();
    }

    private async Task LoadClientsAndProjectNamesAsync()
    {
        int clientId = _clients[0].ID;
        int projectCodeId =_projectCodes[0].ID; 
        var clientName = await GetClientNameAsync(clientId); 
        var projectName = await GetProjectNameAsync(projectCodeId);

        _pettyCashVM.ClientId = clientId;
        _pettyCashVM.ClientName = clientName;
        _pettyCashVM.ProjectCodeId = projectCodeId;
        _pettyCashVM.ProjectName = projectName;

    }
    private async Task LoadPettyCashListAsync()
    {
        _pettyCashList = (await _service.GetAll()).OrderBy(c => c.Date).ToList();
        _pettyCashVMQList = _pettyCashList
            .Select(p => new PettyCashVM
                {
                    ID = p.ID,
                    PCFNo = p.PCFNo,
                    Date = p.Date,
                    Payee = p.Payee,
                    Particulars = p.Particulars,
                    ClientId = p.ClientId,
                    ProjectCodeId = p.ProjectCodeId,
                    Amount = p.Amount,
                    ClientName = GetClientNameAsync(p.ClientId.GetValueOrDefault())?.Result,
                    ProjectName = GetProjectNameAsync(p.ProjectCodeId.GetValueOrDefault())?.Result,
                })
            .AsQueryable();


        _pettyCashVM.SetPettyCashList(_pettyCashList);
    }

    private void SavePettyCash()
    {
        if(_pettyCashVM.ClientId == null)
        {
            LoadClientsAndProjectNamesAsync().Wait();
        }

        _pettyCash.ID = _pettyCashVM.ID;
        _pettyCash.PCFNo = _pettyCashVM.PCFNo;
        _pettyCash.Date = _pettyCashVM.Date;
        _pettyCash.Payee = _pettyCashVM.Payee;
        _pettyCash.Particulars = _pettyCashVM.Particulars;
        _pettyCash.ClientId = _pettyCashVM.ClientId;
        _pettyCash.ProjectCodeId = _pettyCashVM.ProjectCodeId;
        _pettyCash.Amount = _pettyCashVM.Amount;

        _pettyCashList?.Add(_pettyCash);

        if (_pettyCash.ID == 0)
        {
            _pettyCash = _service.Create(_pettyCash).Result;
        }
        else
        {
            _pettyCash = _service.Update(_pettyCash).Result;
        }

        GetItemsProvider();
    }

    private void Edit(PettyCashVM model)
    {
        var foundModel = _pettyCashVMList?.FirstOrDefault(j => j.ID == model.ID);

        if (foundModel != null)
        {
            foundModel.PCFNo = model.PCFNo;
            foundModel.Date = model.Date;
            foundModel.Payee = model.Payee;
            foundModel.Payee = model.Payee;
            foundModel.Particulars = model.Particulars;
            foundModel.ClientId = model.ClientId;
            foundModel.ProjectCodeId = model.ProjectCodeId;
            foundModel.Amount = model.Amount;
            foundModel.Particulars = model.Particulars;

            //GetItemsProvider().Wait();
        }
    }

    private void Delete(PettyCashVM model)
    {
        _pettyCashVMList?.Remove(model);

        //GetItemsProvider().Wait();
    }

    private async Task<string>? GetClientNameAsync(int id)
    {
        string? name = string.Empty;

        await Task.Run(() =>
        {
            name = _clients?.FirstOrDefault(c => c.ID == id)?.Name;
        });

        return name;
    }

    private async Task<string>? GetProjectNameAsync(int id)
    {
        string? name = string.Empty;

        await Task.Run(() =>
        {
            name = _projectCodes?.FirstOrDefault(c => c.ID == id)?.Description;
        });

        return name;
    }

    private string? GetAccountName(int coaId)
    {
        var coa = _coaService.Get(coaId).Result;
        return coa?.AccountName;
    }

    private void GetItemsProvider()
    {
        Console.WriteLine("Entering _itemsProvider await");

        _itemsProvider = async request =>
        {
            Console.WriteLine("Entering _itemsProvider lambda");

            await Task.Delay(1000); // Introduce a delay for debugging purposes

            var result = await LoadPettyCashListAsync(request);

            if (result.TotalItemCount != _numResults && !request.CancellationToken.IsCancellationRequested)
            {
                Console.WriteLine("Refreshing state");
                _numResults = result.TotalItemCount;
                StateHasChanged();
            }

            Console.WriteLine("Exiting _itemsProvider lambda");
            return result;
        };

    }

    private async ValueTask<GridItemsProviderResult<PettyCashVM>> LoadPettyCashListAsync(GridItemsProviderRequest<PettyCashVM> request)
    {
        GridItemsProviderResult<PettyCashVM> result = new()
            {
                Items = _pettyCashVMList,
                TotalItemCount = _numResults
            };

        await Task.Run(() =>
        {
            _pettyCashVMList = _pettyCashVMQList?.Skip(request.StartIndex).Take(_pagination.ItemsPerPage).ToList();
            var count = _pettyCashVMList?.Count();
            _numResults = count.GetValueOrDefault();

            result = new()
                {
                    Items = _pettyCashVMList,
                    TotalItemCount = _numResults
                };
        });

        return result;
    }
}
